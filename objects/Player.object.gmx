<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialization
ds_list_add(global.soundsources, self)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// basic movement and collision

// key input check
// running?
if keyboard_check(vk_shift) {
    speed_mod = 5
} else if keyboard_check(vk_control) {
    speed_mod = 1
} else {
    speed_mod = 3
}

// vertical
if keyboard_check(vk_up) and (vspeed &gt; -20){
    vspeed -= speed_mod;
} else if keyboard_check(vk_down) and (vspeed &lt; 20){
    vspeed += speed_mod
}

// horizontal
if keyboard_check(vk_left) and (hspeed &gt; -20) {
    hspeed -= (speed_mod)
} else if keyboard_check(vk_right) and (hspeed &lt; 20){
    hspeed += speed_mod;
}

// collision check for walls and half-walls
// bouncing
// and create a noisemaker for the bounce
if (place_meeting(x+hspeed,y,Wall)) {
    instance_create(x, y, Noisemaker);
    hspeed = -hspeed;
}
if (place_meeting(x,y+vspeed,Wall)) {
    instance_create(x, y, Noisemaker);
    vspeed = -vspeed;
}

// actually calculating distance is too slow?
self.loudness = (abs(vspeed) + abs(hspeed)) / 5

// position expressed in tiles
self.tilex = round((self.x / global.tilesize) + 1)
self.tiley = round((self.y / global.tilesize) + 1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>104</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_vspeed</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>-20</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
